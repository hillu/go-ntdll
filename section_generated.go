// This file was autogenerated using go run mkcode.go -- section.go
// DO NOT EDIT.

package ntdll

import "unsafe"

// The SectionInherit constants have been derived from the SECTION_INHERIT enum definition.
type SectionInherit uint32

const (
	ViewShare SectionInherit = 1
	ViewUnmap                = 2
)

var (
	procNtCreateSection     = modntdll.NewProc("NtCreateSection")
	procNtOpenSection       = modntdll.NewProc("NtOpenSection")
	procNtwMapViewOfSection = modntdll.NewProc("NtwMapViewOfSection")
)

// OUT-parameter: SectionHandle.
// *OPT-parameter: ObjectAttributes, MaximumSize, FileHandle.
func NtCreateSection(
	SectionHandle *Handle,
	DesiredAccess AccessMask,
	ObjectAttributes *ObjectAttributes,
	MaximumSize *int64,
	SectionPageProtection uint32,
	AllocationAttributes uint32,
	FileHandle Handle,
) NtStatus {
	r0, _, _ := procNtCreateSection.Call(uintptr(unsafe.Pointer(SectionHandle)),
		uintptr(DesiredAccess),
		uintptr(unsafe.Pointer(ObjectAttributes)),
		uintptr(unsafe.Pointer(MaximumSize)),
		uintptr(SectionPageProtection),
		uintptr(AllocationAttributes),
		uintptr(FileHandle))
	return NtStatus(r0)
}

// OUT-parameter: SectionHandle.
func NtOpenSection(
	SectionHandle *Handle,
	DesiredAccess AccessMask,
	ObjectAttributes *ObjectAttributes,
) NtStatus {
	r0, _, _ := procNtOpenSection.Call(uintptr(unsafe.Pointer(SectionHandle)),
		uintptr(DesiredAccess),
		uintptr(unsafe.Pointer(ObjectAttributes)))
	return NtStatus(r0)
}

// INOUT-parameter: BaseAddress, SectionOffset, ViewSize.
// *OPT-parameter: SectionOffset.
func NtwMapViewOfSection(
	SectionHandle Handle,
	ProcessHandle Handle,
	BaseAddress *byte,
	ZeroBits *uint32,
	CommitSize uintptr,
	SectionOffset *int64,
	ViewSize *uintptr,
	InheritDisposition SectionInherit,
	AllocationType uint32,
	Win32Protect uint32,
) NtStatus {
	r0, _, _ := procNtwMapViewOfSection.Call(uintptr(SectionHandle),
		uintptr(ProcessHandle),
		uintptr(unsafe.Pointer(BaseAddress)),
		uintptr(unsafe.Pointer(ZeroBits)),
		uintptr(CommitSize),
		uintptr(unsafe.Pointer(SectionOffset)),
		uintptr(unsafe.Pointer(ViewSize)),
		uintptr(InheritDisposition),
		uintptr(AllocationType),
		uintptr(Win32Protect))
	return NtStatus(r0)
}
